#!/bin/bash

# RabbitMQ Production Installation Script v3
# This script configures RabbitMQ for PRODUCTION environments where:
# - Service users are managed by Kerberos/LDAP/SSSD (validates existence, doesn't create them)
# - Creates home directories if they don't exist (common for enterprise service accounts)
# - Sets up complete system integration (systemd, logrotate, limits, etc.)
# - Provides two-phase installation: system setup → service start → runtime configuration

# Strict mode
set -euo pipefail

#------------------------------------------------------------------------------

# Configuration Variables
#------------------------------------------------------------------------------

# Base directory where RabbitMQ was unpacked and renamed
# e.g., /app/layered/rabbitmq after unpacking and renaming
INSTALL_DIR="/app/layered/rabbitmq"
ERLANG_DIR="/app/layered/erlang"

# Target user and group for running RabbitMQ (must exist - e.g., from Kerberos)
TARGET_USER="tmv_prod_run_rmq1"
TARGET_GROUP="tmv_prod_run_rmq1_g"

# Desired nofile (ulimit -n) limit
NOFILE_LIMIT=100000

# Name for the systemd service
SERVICE_NAME="rabbitmq-server"

#------------------------------------------------------------------------------

# Helper Functions
#------------------------------------------------------------------------------
log_info() {
echo "[INFO] $1"
}

log_error() {
echo "[ERROR] $1" >&2
}

#------------------------------------------------------------------------------

# Pre-flight Checks
#------------------------------------------------------------------------------
log_info "Starting RabbitMQ post-installation configuration for $INSTALL_DIR"

# Check if running as root
if [[ "$(id -u)" -ne 0 ]]; then
log_error "This script must be run as root or using sudo."
exit 1
fi

# Verify Erlang version
log_info "Checking Erlang version..."
if ! command -v "$ERLANG_DIR/bin/erl" &>/dev/null; then
    log_error "Erlang is not installed or $ERLANG_DIR/bin/erl is not executable. Please install Erlang 27.x or higher to $ERLANG_DIR."
    exit 1
fi

ERLANG_VERSION=$("$ERLANG_DIR/bin/erl" -eval 'erlang:display(erlang:system_info(otp_release)), halt().' -noshell | tr -d '"')
if [[ "$ERLANG_VERSION" != 27* ]]; then
    log_error "Erlang version 27.x is required. Detected version: $ERLANG_VERSION (from $ERLANG_DIR/bin/erl)"
    exit 1
else
log_info "Erlang version $ERLANG_VERSION detected."
fi

# Verify installation directory exists
if [[ ! -d "$INSTALL_DIR" ]]; then
log_error "Installation directory '$INSTALL_DIR' not found. Please unpack RabbitMQ first."
exit 1
fi

# Verify target user exists
if ! id "$TARGET_USER" &>/dev/null; then
log_error "Target user '$TARGET_USER' does not exist. Please ensure it's available via Kerberos/LDAP/SSSD."
exit 1
else
log_info "Target user '$TARGET_USER' found."
fi

# Verify target group exists
if ! getent group "$TARGET_GROUP" &>/dev/null; then
log_error "Target group '$TARGET_GROUP' does not exist. Please ensure it's available via Kerberos/LDAP/SSSD."
exit 1
else
log_info "Target group '$TARGET_GROUP' found."
fi

#------------------------------------------------------------------------------

# Create Necessary Directories
#------------------------------------------------------------------------------
log_info "Creating RabbitMQ data and log directories..."
mkdir -p "$INSTALL_DIR/var/log/rabbitmq"
mkdir -p "$INSTALL_DIR/var/lib/rabbitmq/mnesia"
log_info "Directories created."

#------------------------------------------------------------------------------

# Create rabbitmq-env.conf
#------------------------------------------------------------------------------
log_info "Creating rabbitmq-env.conf..."

CONFIG_HOSTNAME=$(hostname -s)
if [ -z "$CONFIG_HOSTNAME" ]; then
    log_error "[WARNING] 'hostname -s' returned an empty string. NODENAME in rabbitmq-env.conf might be invalid (rabbit@)."
    # Allowing to proceed, RabbitMQ might have internal fallbacks or fail later, but this is a warning.
    # For a stricter approach, one might exit here: exit 1
fi

cat << EOF > "$INSTALL_DIR/etc/rabbitmq/rabbitmq-env.conf"

# Configuration generated by tmv_rabbitmq_postinstall.sh
# Base directory of the installation
BASE=$INSTALL_DIR

# Data and Log directories
NODENAME=rabbit@${CONFIG_HOSTNAME} # Use pre-resolved short hostname
NODE_IP_ADDRESS=127.0.0.1
MNESIA_BASE=\$BASE/var/lib/rabbitmq/mnesia
LOG_BASE=\$BASE/var/log/rabbitmq

# RabbitMQ Environment Variables
RABBITMQ_HOME=$INSTALL_DIR
RABBITMQ_MNESIA_BASE=$INSTALL_DIR/var/lib/rabbitmq
RABBITMQ_MNESIA_DIR=$INSTALL_DIR/var/lib/rabbitmq/mnesia
RABBITMQ_LOG_BASE=$INSTALL_DIR/var/log/rabbitmq

# Erlang Environment Variable
ERLANG_HOME=$ERLANG_DIR
EOF
log_info "rabbitmq-env.conf created."

#------------------------------------------------------------------------------

# Create systemd Service File
#------------------------------------------------------------------------------
log_info "Creating systemd service file /etc/systemd/system/$SERVICE_NAME.service ..."
cat << EOF > "/etc/systemd/system/$SERVICE_NAME.service"
[Unit]
Description=RabbitMQ Broker Service (TMV Custom Install)
After=network.target epmd@.socket
Wants=network.target epmd@.socket sssd.service

[Service]
Type=notify
User=$TARGET_USER
Group=$TARGET_GROUP
WorkingDirectory=$INSTALL_DIR

# Environment variables for RabbitMQ and Erlang
Environment=ERLANG_HOME=$ERLANG_DIR
Environment=RABBITMQ_HOME=$INSTALL_DIR
Environment=PATH=$INSTALL_DIR/sbin:$ERLANG_DIR/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

RemainAfterExit=yes

ExecStart=$INSTALL_DIR/sbin/rabbitmq-server
ExecStop=$INSTALL_DIR/sbin/rabbitmqctl stop_app

NotifyAccess=all
TimeoutStartSec=3600
TimeoutStopSec=3600
Restart=always
RestartSec=10
UMask=0027

# Set service limit (also set via limits.d)
LimitNOFILE=$NOFILE_LIMIT

[Install]
WantedBy=multi-user.target
EOF
log_info "Systemd service file created."

#------------------------------------------------------------------------------

# Create Logrotate Configuration
#------------------------------------------------------------------------------
log_info "Creating logrotate configuration /etc/logrotate.d/$SERVICE_NAME ..."
cat << EOF > "/etc/logrotate.d/$SERVICE_NAME"
$INSTALL_DIR/var/log/rabbitmq/*.log {
weekly
missingok
rotate 7
compress
delaycompress
notifempty
# Run rabbitmqctl rotate_logs as the target user
# This assumes su and the target user's shell environment work correctly
postrotate
if [ -f "$INSTALL_DIR/sbin/rabbitmqctl" ]; then
su -s /bin/sh -c "$INSTALL_DIR/sbin/rabbitmqctl rotate_logs" $TARGET_USER > /dev/null 2>&1 || true
fi
endscript
}
EOF
log_info "Logrotate configuration created."

#------------------------------------------------------------------------------

# Create Tmpfiles.d Configuration
#------------------------------------------------------------------------------
log_info "Creating tmpfiles.d configuration /etc/tmpfiles.d/$SERVICE_NAME.conf ..."

# This ensures the /run/rabbitmq dir is created with correct permissions if needed by plugins/core
cat << EOF > "/etc/tmpfiles.d/$SERVICE_NAME.conf"

# Type Path Mode UID GID Age Argument
d /run/rabbitmq 0755 $TARGET_USER $TARGET_GROUP - -
EOF
log_info "Tmpfiles.d configuration created."

#------------------------------------------------------------------------------

# Configure System Limits (ulimit)
#------------------------------------------------------------------------------
log_info "Configuring system limits for user '$TARGET_USER' in /etc/security/limits.d/ ..."
LIMITS_FILE="/etc/security/limits.d/99-tmv-rabbitmq.conf"
cat << EOF > "$LIMITS_FILE"

# Limits for RabbitMQ user ($TARGET_USER) set by tmv_rabbitmq_postinstall.sh
# See 'man limits.conf'
$TARGET_USER soft nofile $NOFILE_LIMIT
$TARGET_USER hard nofile $NOFILE_LIMIT
EOF
chmod 0644 "$LIMITS_FILE"
log_info "System limits configuration created in $LIMITS_FILE."
log_info "Note: A system reboot or user re-login might be required for these limits to fully apply outside the systemd service."

#------------------------------------------------------------------------------

# Set Ownership and Permissions
#------------------------------------------------------------------------------
log_info "Setting ownership for $INSTALL_DIR to $TARGET_USER:$TARGET_GROUP ..."
chown -R "$TARGET_USER:$TARGET_GROUP" "$INSTALL_DIR"
# chown -R "$TARGET_USER:$TARGET_GROUP" "$ERLANG_DIR" # Commented out: Do not change Erlang dir ownership
chmod -R 775 "$INSTALL_DIR"
# chmod -R a+rx "$ERLANG_DIR" # Commented out: Do not change Erlang dir permissions
log_info "Ownership and permissions set."

# Note: You might need more granular permissions depending on security requirements.
# e.g., chmod 700 "$INSTALL_DIR/var/lib/rabbitmq/mnesia"
# Set Ownership and Permissions for System Files
log_info "Setting ownership and permissions for system files..."
chown "$TARGET_USER:$TARGET_GROUP" "/etc/systemd/system/$SERVICE_NAME.service"
chmod 664 "/etc/systemd/system/$SERVICE_NAME.service"

chown "$TARGET_USER:$TARGET_GROUP" "/etc/logrotate.d/$SERVICE_NAME"
chmod 664 "/etc/logrotate.d/$SERVICE_NAME"

chown "$TARGET_USER:$TARGET_GROUP" "/etc/tmpfiles.d/$SERVICE_NAME.conf"
chmod 664 "/etc/tmpfiles.d/$SERVICE_NAME.conf"

chown "$TARGET_USER:$TARGET_GROUP" "/etc/security/limits.d/99-tmv-rabbitmq.conf" # Path stored in $LIMITS_FILE
chmod 664 "/etc/security/limits.d/99-tmv-rabbitmq.conf" # Ensures 664 for owner/group write

log_info "Ownership and permissions for system files set."

#------------------------------------------------------------------------------

# Configure SELinux Contexts (for RHEL/CentOS with SELinux enabled)
#------------------------------------------------------------------------------
if command -v getenforce >/dev/null 2>&1 && [[ "$(getenforce)" == "Enforcing" ]]; then
    log_info "SELinux is enforcing. Configuring SELinux contexts for RabbitMQ executables..."
    
    # Set correct context for executables so systemd can run them
    if command -v chcon >/dev/null 2>&1; then
        log_info "Setting SELinux context for RabbitMQ executables..."
        chcon -t bin_t "$INSTALL_DIR/sbin/"* 2>/dev/null || true
        chcon -t bin_t "$INSTALL_DIR/escript/"* 2>/dev/null || true
        log_info "SELinux contexts set for executables."
        
        # Make the context changes persistent (if semanage is available)
        if command -v semanage >/dev/null 2>&1; then
            log_info "Making SELinux context changes persistent..."
            semanage fcontext -a -t bin_t "$INSTALL_DIR/sbin/.*" 2>/dev/null || true
            semanage fcontext -a -t bin_t "$INSTALL_DIR/escript/.*" 2>/dev/null || true
            
            # Apply persistent contexts
            if command -v restorecon >/dev/null 2>&1; then
                restorecon -R "$INSTALL_DIR/sbin/" 2>/dev/null || true
                restorecon -R "$INSTALL_DIR/escript/" 2>/dev/null || true
            fi
            log_info "SELinux contexts made persistent."
        else
            log_info "semanage not available - SELinux context changes are temporary."
        fi
    else
        log_info "chcon not available - skipping SELinux context configuration."
    fi
else
    log_info "SELinux not enforcing or not available - skipping SELinux context configuration."
fi

#------------------------------------------------------------------------------

# Systemd Configuration Reload and Service Enable
#------------------------------------------------------------------------------
log_info "Reloading systemd daemon configuration..."
systemctl daemon-reload
log_info "Enabling $SERVICE_NAME service to start on boot..."
systemctl enable "$SERVICE_NAME.service"
log_info "$SERVICE_NAME service enabled."

#------------------------------------------------------------------------------

# Create Runtime Configuration Script (to be run as service user)
#------------------------------------------------------------------------------
log_info "Creating runtime configuration script at $INSTALL_DIR/sbin/rabbitmq-post-install.sh..."
RUNTIME_CONFIG_SCRIPT_PATH="$INSTALL_DIR/sbin/rabbitmq-post-install.sh"

mkdir -p "$INSTALL_DIR/sbin" # Ensure sbin directory exists

cat << 'EOF_RUNTIME_SCRIPT' > "$RUNTIME_CONFIG_SCRIPT_PATH"
#!/bin/bash

# This script should be run as the RabbitMQ service user (e.g., tmv_prod_run_rmq1)
# AFTER the main rabbitmq-install-script_v2.sh has completed,
# AND AFTER the RabbitMQ service has been started (e.g., sudo systemctl start rabbitmq-server).
#
# It assumes ERLANG_HOME, RABBITMQ_HOME, and PATH are correctly set in the
# service user's environment (e.g., via their .bashrc).

set -euo pipefail

log_info() {
    echo "[INFO] ($(basename "$0")) $1"
}

log_error() {
    echo "[ERROR] ($(basename "$0")) $1" >&2
}

# Verify environment
if [ -z "$RABBITMQ_HOME" ] || [ -z "$ERLANG_HOME" ]; then
    log_error "RABBITMQ_HOME or ERLANG_HOME is not set."
    log_error "Ensure you are running this script as the RabbitMQ service user, and their .bashrc has been sourced."
    # TARGET_USER_FROM_MAIN_SCRIPT is not available here, so we show current user
    log_error "Current user: $(id -u -n)"
    exit 1
fi

if ! command -v rabbitmqctl >/dev/null 2>&1 || ! command -v rabbitmq-plugins >/dev/null 2>&1; then
    log_error "rabbitmqctl or rabbitmq-plugins command not found in PATH."
    log_error "Ensure you are running this script as the RabbitMQ service user, and their .bashrc has been sourced."
    exit 1
fi

log_info "Starting RabbitMQ runtime configuration..."
log_info "Current user: $(id -u -n)"
log_info "Using RABBITMQ_HOME: $RABBITMQ_HOME"
log_info "Using ERLANG_HOME: $ERLANG_HOME"
log_info "Using 'rabbitmqctl' from: $(command -v rabbitmqctl)"
log_info "Using 'rabbitmq-plugins' from: $(command -v rabbitmq-plugins)"

# Check if RabbitMQ server is running
log_info "Checking RabbitMQ server status..."
if ! rabbitmqctl status >/dev/null 2>&1; then
    log_error "RabbitMQ server does not appear to be running or is not reachable by 'rabbitmqctl status'."
    log_error "Please ensure the service is started (e.g., 'sudo systemctl start rabbitmq-server') before running this script."
    exit 1
fi
log_info "RabbitMQ server appears to be running."

# Enable plugins (idempotent, can be run even if already enabled)
log_info "Enabling rabbitmq_management plugin..."
rabbitmq-plugins enable rabbitmq_management

# Configure admin user
ADMIN_USER="admin"
ADMIN_PASS="admin" # Consider making this configurable or prompting if security is a concern for this script

log_info "Checking for existing admin user '$ADMIN_USER'..."
# More robust user existence check that handles grep properly
if rabbitmqctl list_users 2>/dev/null | grep -q "^${ADMIN_USER}[[:space:]]"; then
    log_info "User '$ADMIN_USER' already exists. Ensuring tags and permissions are set."
else
    log_info "Adding admin user '$ADMIN_USER'..."
    rabbitmqctl add_user "$ADMIN_USER" "$ADMIN_PASS"
    log_info "User '$ADMIN_USER' created."
fi

log_info "Setting tags for '$ADMIN_USER' user to administrator..."
rabbitmqctl set_user_tags "$ADMIN_USER" administrator

log_info "Setting permissions for '$ADMIN_USER' user in vhost '/'..."
rabbitmqctl set_permissions -p / "$ADMIN_USER" ".*" ".*" ".*"

log_info "Verifying admin user configuration..."
rabbitmqctl list_users

log_info "Runtime configuration completed successfully."
log_info "You should now be able to access the RabbitMQ Management UI."
exit 0
EOF_RUNTIME_SCRIPT

chmod +x "$RUNTIME_CONFIG_SCRIPT_PATH"
chown "$TARGET_USER:$TARGET_GROUP" "$RUNTIME_CONFIG_SCRIPT_PATH"
log_info "Runtime configuration script created and made executable."

# Configure Environment for Service Account
#------------------------------------------------------------------------------
log_info "Configuring environment for service account $TARGET_USER..."
BASHRC_FILE="/home/$TARGET_USER/.bashrc"
PROFILE_FILE="/home/$TARGET_USER/.profile" # Also check .profile for PATH

# Create home directory if it doesn't exist
USER_HOME_DIR="/home/$TARGET_USER"
if [[ ! -d "$USER_HOME_DIR" ]]; then
    log_info "Creating home directory for $TARGET_USER at $USER_HOME_DIR..."
    mkdir -p "$USER_HOME_DIR"
    chown "$TARGET_USER:$TARGET_GROUP" "$USER_HOME_DIR"
    chmod 755 "$USER_HOME_DIR"
    log_info "Home directory created."
else
    log_info "Home directory $USER_HOME_DIR already exists."
fi

# Ensure .bashrc exists, create if not (common for non-interactive users initially)
if [ ! -f "$BASHRC_FILE" ]; then
    touch "$BASHRC_FILE"
    chown "$TARGET_USER:$TARGET_GROUP" "$BASHRC_FILE"
    chmod 644 "$BASHRC_FILE"
fi

# Ensure ERLANG_HOME is set
ERLANG_HOME_STR="export ERLANG_HOME=$ERLANG_DIR"
if ! grep -qF "$ERLANG_HOME_STR" "$BASHRC_FILE"; then
    echo "$ERLANG_HOME_STR" >> "$BASHRC_FILE"
    log_info "ERLANG_HOME exported in .bashrc for $TARGET_USER."
else
    log_info "ERLANG_HOME already configured in .bashrc for $TARGET_USER."
fi

# Ensure RABBITMQ_HOME is set
RABBITMQ_HOME_STR="export RABBITMQ_HOME=$INSTALL_DIR"
if ! grep -qF "$RABBITMQ_HOME_STR" "$BASHRC_FILE"; then
    echo "$RABBITMQ_HOME_STR" >> "$BASHRC_FILE"
    log_info "RABBITMQ_HOME exported in .bashrc for $TARGET_USER."
else
    log_info "RABBITMQ_HOME already configured in .bashrc for $TARGET_USER."
fi

# Ensure PATH includes Erlang and RabbitMQ bin/sbin
# Check both .bashrc and .profile for existing PATH modifications to be more robust
PATH_CORE_STR="$INSTALL_DIR/sbin:$ERLANG_DIR/bin"
NEW_PATH_ENTRY="export PATH=\"$PATH_CORE_STR:\$PATH\""

path_configured=false
if [ -f "$BASHRC_FILE" ] && grep -qF "$PATH_CORE_STR" "$BASHRC_FILE"; then
    path_configured=true
fi
if [ -f "$PROFILE_FILE" ] && grep -qF "$PATH_CORE_STR" "$PROFILE_FILE"; then
    path_configured=true
fi

if [ "$path_configured" = false ]; then
    echo "$NEW_PATH_ENTRY" >> "$BASHRC_FILE"
    log_info "RabbitMQ and Erlang paths added to PATH in .bashrc for $TARGET_USER."
else
    log_info "RabbitMQ and Erlang paths appear to be already configured in shell startup files for $TARGET_USER."
fi

# Add login banner for RabbitMQ management
BANNER_MARKER="# RabbitMQ Service Account Banner"
if ! grep -qF "$BANNER_MARKER" "$BASHRC_FILE"; then
    cat >> "$BASHRC_FILE" << EOF

$BANNER_MARKER
echo "=========================================="
echo "  RabbitMQ Service Account ($(whoami))"
echo "=========================================="
echo "RabbitMQ Installation: $INSTALL_DIR"
echo "Erlang Installation:   $ERLANG_DIR"
echo ""
echo "Common RabbitMQ Commands:"
echo "  rabbitmqctl status      - Check RabbitMQ status"
echo "  rabbitmqctl stop_app    - Stop RabbitMQ application"
echo "  rabbitmqctl start_app   - Start RabbitMQ application"
echo "  rabbitmqctl list_users  - List all users"
echo "  rabbitmq-plugins list   - List available plugins"
echo ""
echo "Service Management (requires sudo):"
echo "  sudo systemctl status rabbitmq-server"
echo "  sudo systemctl start rabbitmq-server"
echo "  sudo systemctl stop rabbitmq-server"
echo ""
echo "Management UI: http://localhost:15672 (admin/admin)"
echo "Logs: $INSTALL_DIR/var/log/rabbitmq/"
echo "=========================================="
echo ""
EOF
    log_info "Login banner added to .bashrc for $TARGET_USER."
else
    log_info "Login banner already configured in .bashrc for $TARGET_USER."
fi

#------------------------------------------------------------------------------

# Completion Message
#------------------------------------------------------------------------------
log_info "-------------------------------------------------------"
log_info "RabbitMQ installation script completed successfully."
log_info "Next Steps (as an administrator with sudo privileges unless specified):"
log_info "1. Start the RabbitMQ service using systemd: sudo systemctl start $SERVICE_NAME.service"
log_info "   (This will run $INSTALL_DIR/sbin/rabbitmq-server as the $TARGET_USER user)."
log_info "2. Wait a few seconds for the service to initialize. You can check status with: sudo systemctl status $SERVICE_NAME.service"
log_info "3. To perform initial runtime configuration (enable management plugin, create admin user):"
log_info "   a. Switch to the service user: sudo su - $TARGET_USER"
log_info "   b. As $TARGET_USER, navigate to $INSTALL_DIR/sbin/ (or rely on PATH if .bashrc sourced correctly)."
log_info "   c. As $TARGET_USER, execute the runtime configuration script: ./rabbitmq-post-install.sh"
log_info "4. After the runtime configuration script completes successfully:"
log_info "   a. The RabbitMQ Management UI should be accessible (default: http://<your_server_ip>:15672, user 'admin', pass 'admin')."
log_info "   b. As $TARGET_USER (if still logged in), you can use 'rabbitmqctl status', 'rabbitmqctl list_users', etc., for further management."
log_info "      (These commands are now in $TARGET_USER's PATH)."
log_info "5. Verify system limits are applied for the service (e.g., check 'Max open files' in 'sudo systemctl status $SERVICE_NAME.service')."
log_info "   For interactive sessions as $TARGET_USER, a re-login might be needed if .bashrc was just created/modified for limits to apply."
log_info "6. Configure firewall rules to allow access to RabbitMQ ports (e.g., 5672 for AMQP, 15672 for Management UI)."
log_info "7. Review logs for any issues in $INSTALL_DIR/var/log/rabbitmq/"
log_info "-------------------------------------------------------"

exit 0